{"version":3,"file":"stimulus_reflex.umd.js","sources":["../javascript/schema.js","../javascript/reflex_store.js","../javascript/log.js","../javascript/utils.js","../javascript/attributes.js","../javascript/lifecycle.js","../javascript/controllers.js","../javascript/reflexes.js","../javascript/callbacks.js","../javascript/stimulus_reflex.js"],"sourcesContent":["const defaultSchema = {\n  reflexAttribute: 'data-reflex',\n  reflexPermanentAttribute: 'data-reflex-permanent',\n  reflexRootAttribute: 'data-reflex-root',\n  reflexSuppressLoggingAttribute: 'data-reflex-suppress-logging',\n  reflexDatasetAttribute: 'data-reflex-dataset',\n  reflexDatasetAllAttribute: 'data-reflex-dataset-all',\n  reflexSerializeFormAttribute: 'data-reflex-serialize-form',\n  reflexFormSelectorAttribute: 'data-reflex-form-selector',\n  reflexIncludeInnerHtmlAttribute: 'data-reflex-include-inner-html',\n  reflexIncludeTextContentAttribute: 'data-reflex-include-text-content'\n}\n\nlet schema = {}\n\nexport default {\n  set (application) {\n    schema = { ...defaultSchema, ...application.schema }\n    for (const attribute in schema) {\n      Object.defineProperty(this, attribute.slice(0, -9), {\n        get: () => {\n          return schema[attribute]\n        }\n      })\n    }\n  }\n}\n","const reflexes = {}\n\nexport { reflexes }\n","import Debug from './debug'\n\nimport { reflexes } from './reflex_store'\n\nconst request = (\n  reflexId,\n  target,\n  args,\n  controller,\n  element,\n  controllerElement\n) => {\n  const reflex = reflexes[reflexId]\n  if (Debug.disabled || reflex.promise.data.suppressLogging) return\n  reflex.timestamp = new Date()\n  console.log(`\\u2191 stimulus \\u2191 ${target}`, {\n    reflexId,\n    args,\n    controller,\n    element,\n    controllerElement\n  })\n}\n\nconst success = (event, halted) => {\n  const { detail } = event || {}\n  const { selector, payload } = detail || {}\n  const { reflexId, target, morph } = detail.stimulusReflex || {}\n  const reflex = reflexes[reflexId]\n  if (Debug.disabled || reflex.promise.data.suppressLogging) return\n  const progress =\n    reflex.totalOperations > 1\n      ? ` ${reflex.completedOperations}/${reflex.totalOperations}`\n      : ''\n  const duration = reflex.timestamp\n    ? `in ${new Date() - reflex.timestamp}ms`\n    : 'CLONED'\n  const operation = event.type\n    .split(':')[1]\n    .split('-')\n    .slice(1)\n    .join('_')\n  console.log(\n    `\\u2193 reflex \\u2193 ${target} \\u2192 ${selector ||\n      '\\u221E'}${progress} ${duration}`,\n    { reflexId, morph, operation, halted, payload }\n  )\n}\n\nconst error = event => {\n  const { detail } = event || {}\n  const { reflexId, target, payload } = detail.stimulusReflex || {}\n  const reflex = reflexes[reflexId]\n  if (Debug.disabled || reflex.promise.data.suppressLogging) return\n  const duration = reflex.timestamp\n    ? `in ${new Date() - reflex.timestamp}ms`\n    : 'CLONED'\n  console.log(\n    `\\u2193 reflex \\u2193 ${target} ${duration} %cERROR: ${event.detail.body}`,\n    'color: #f00;',\n    { reflexId, payload }\n  )\n}\n\nexport default { request, success, error }\n","// uuid4 function taken from stackoverflow\n// https://stackoverflow.com/a/2117523/554903\n\nconst uuidv4 = () => {\n  const crypto = window.crypto || window.msCrypto\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (\n      c ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n    ).toString(16)\n  )\n}\n\nconst serializeForm = (form, options = {}) => {\n  if (!form) return ''\n\n  const w = options.w || window\n  const { element } = options\n  const formData = new w.FormData(form)\n  const data = Array.from(formData, e => e.map(encodeURIComponent).join('='))\n  const submitButton = form.querySelector('input[type=submit]')\n  if (\n    element &&\n    element.name &&\n    element.nodeName === 'INPUT' &&\n    element.type === 'submit'\n  ) {\n    data.push(\n      `${encodeURIComponent(element.name)}=${encodeURIComponent(element.value)}`\n    )\n  } else if (submitButton && submitButton.name) {\n    data.push(\n      `${encodeURIComponent(submitButton.name)}=${encodeURIComponent(\n        submitButton.value\n      )}`\n    )\n  }\n  return Array.from(data).join('&')\n}\n\nconst camelize = (value, uppercaseFirstLetter = true) => {\n  if (typeof value !== 'string') return ''\n  value = value\n    .replace(/[\\s_](.)/g, $1 => $1.toUpperCase())\n    .replace(/[\\s_]/g, '')\n    .replace(/^(.)/, $1 => $1.toLowerCase())\n\n  if (uppercaseFirstLetter)\n    value = value.substr(0, 1).toUpperCase() + value.substr(1)\n\n  return value\n}\n\nconst debounce = (callback, delay = 250) => {\n  let timeoutId\n  return (...args) => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      callback(...args)\n    }, delay)\n  }\n}\n\nconst extractReflexName = reflexString => {\n  const match = reflexString.match(/(?:.*->)?(.*?)(?:Reflex)?#/)\n\n  return match ? match[1] : ''\n}\n\nconst emitEvent = (event, detail) => {\n  document.dispatchEvent(\n    new CustomEvent(event, {\n      bubbles: true,\n      cancelable: false,\n      detail\n    })\n  )\n  if (window.jQuery) window.jQuery(document).trigger(event, detail)\n}\n\n// construct a valid xPath for an element in the DOM\nconst elementToXPath = element => {\n  if (element.id !== '') return \"//*[@id='\" + element.id + \"']\"\n  if (element === document.body) return '/html/body'\n\n  let ix = 0\n  const siblings = element?.parentNode ? element.parentNode.childNodes : []\n\n  for (var i = 0; i < siblings.length; i++) {\n    const sibling = siblings[i]\n    if (sibling === element) {\n      const computedPath = elementToXPath(element.parentNode)\n      const tagName = element.tagName.toLowerCase()\n      const ixInc = ix + 1\n      return `${computedPath}/${tagName}[${ixInc}]`\n    }\n\n    if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {\n      ix++\n    }\n  }\n}\n\nconst XPathToElement = xpath => {\n  return document.evaluate(\n    xpath,\n    document,\n    null,\n    XPathResult.FIRST_ORDERED_NODE_TYPE,\n    null\n  ).singleNodeValue\n}\n\nconst XPathToArray = (xpath, reverse = false) => {\n  const snapshotList = document.evaluate(\n    xpath,\n    document,\n    null,\n    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n\n  const snapshots = []\n\n  for (let i = 0; i < snapshotList.snapshotLength; i++) {\n    snapshots.push(snapshotList.snapshotItem(i))\n  }\n\n  return reverse ? snapshots.reverse() : snapshots\n}\n\nexport {\n  uuidv4,\n  serializeForm,\n  camelize,\n  debounce,\n  extractReflexName,\n  emitEvent,\n  elementToXPath,\n  XPathToElement,\n  XPathToArray\n}\n","import Schema from './schema'\nimport Debug from './debug'\nimport Deprecate from './deprecate'\n\nimport { elementToXPath, XPathToArray } from './utils'\n\nconst multipleInstances = element => {\n  if (['checkbox', 'radio'].includes(element.type)) {\n    return (\n      document.querySelectorAll(\n        `input[type=\"${element.type}\"][name=\"${element.name}\"]`\n      ).length > 1\n    )\n  }\n  return false\n}\nconst collectCheckedOptions = element => {\n  return Array.from(element.querySelectorAll('option:checked'))\n    .concat(\n      Array.from(\n        document.querySelectorAll(\n          `input[type=\"${element.type}\"][name=\"${element.name}\"]`\n        )\n      ).filter(elem => elem.checked)\n    )\n    .map(o => o.value)\n}\n\n// Returns a string value for the passed array.\n//\n//   attributeValue(['', 'one', null, 'two', 'three ']) // 'one two three'\n//\nconst attributeValue = (values = []) => {\n  const value = values\n    .filter(v => v && String(v).length)\n    .map(v => v.trim())\n    .join(' ')\n    .trim()\n  return value.length ? value : null\n}\n\n// Returns an array for the passed string value by splitting on whitespace.\n//\n//   attributeValues('one two three ') // ['one', 'two', 'three']\n//\nconst attributeValues = value => {\n  if (!value) return []\n  if (!value.length) return []\n  return value.split(' ').filter(v => v.trim().length)\n}\n\n// Extracts attributes from a DOM element.\n//\nconst extractElementAttributes = element => {\n  let attrs = Array.from(element.attributes).reduce((memo, attr) => {\n    memo[attr.name] = attr.value\n    return memo\n  }, {})\n\n  attrs.checked = !!element.checked\n  attrs.selected = !!element.selected\n  attrs.tag_name = element.tagName\n\n  if (element.tagName.match(/select/i) || multipleInstances(element)) {\n    const collectedOptions = collectCheckedOptions(element)\n    attrs.values = collectedOptions\n    attrs.value = collectedOptions.join(',')\n  } else {\n    attrs.value = element.value\n  }\n  return attrs\n}\n\n// Returns an array of elements for the provided tokens.\n// Tokens is an array of space separated string coming from the `data-reflex-dataset`\n// or `data-reflex-dataset-all` attribute.\n//\nconst getElementsFromTokens = (element, tokens) => {\n  if (!tokens || tokens.length === 0) return []\n\n  let elements = [element]\n\n  const xPath = elementToXPath(element)\n\n  tokens.forEach(token => {\n    try {\n      switch (token) {\n        case 'combined':\n          if (Deprecate.enabled)\n            console.warn(\n              \"In the next version of StimulusReflex, the 'combined' option to data-reflex-dataset will become 'ancestors'.\"\n            )\n          elements = [\n            ...elements,\n            ...XPathToArray(`${xPath}/ancestor::*`, true)\n          ]\n          break\n        case 'ancestors':\n          elements = [\n            ...elements,\n            ...XPathToArray(`${xPath}/ancestor::*`, true)\n          ]\n          break\n        case 'parent':\n          elements = [...elements, ...XPathToArray(`${xPath}/parent::*`)]\n          break\n        case 'siblings':\n          elements = [\n            ...elements,\n            ...XPathToArray(\n              `${xPath}/preceding-sibling::*|${xPath}/following-sibling::*`\n            )\n          ]\n          break\n        case 'children':\n          elements = [...elements, ...XPathToArray(`${xPath}/child::*`)]\n          break\n        case 'descendants':\n          elements = [...elements, ...XPathToArray(`${xPath}/descendant::*`)]\n          break\n        default:\n          elements = [...elements, ...document.querySelectorAll(token)]\n      }\n    } catch (error) {\n      if (Debug.enabled) console.error(error)\n    }\n  })\n\n  return elements\n}\n\n// Extracts the dataset of an element and combines it with the data attributes from all specified tokens\n//\nconst extractElementDataset = element => {\n  const dataset = element.attributes[Schema.reflexDataset]\n  const allDataset = element.attributes[Schema.reflexDatasetAll]\n\n  const tokens = (dataset && dataset.value.split(' ')) || []\n  const allTokens = (allDataset && allDataset.value.split(' ')) || []\n\n  const datasetElements = getElementsFromTokens(element, tokens)\n  const datasetAllElements = getElementsFromTokens(element, allTokens)\n\n  const datasetAttributes = datasetElements.reduce((acc, ele) => {\n    return { ...extractDataAttributes(ele), ...acc }\n  }, {})\n\n  const reflexElementAttributes = extractDataAttributes(element)\n\n  const elementDataset = {\n    dataset: { ...reflexElementAttributes, ...datasetAttributes },\n    datasetAll: {}\n  }\n\n  datasetAllElements.forEach(element => {\n    const elementAttributes = extractDataAttributes(element)\n\n    Object.keys(elementAttributes).forEach(key => {\n      const value = elementAttributes[key]\n\n      if (\n        elementDataset.datasetAll[key] &&\n        Array.isArray(elementDataset.datasetAll[key])\n      ) {\n        elementDataset.datasetAll[key].push(value)\n      } else {\n        elementDataset.datasetAll[key] = [value]\n      }\n    })\n  })\n\n  return elementDataset\n}\n\n// Extracts all data attributes from a DOM element.\n//\nconst extractDataAttributes = element => {\n  let attrs = {}\n\n  if (element && element.attributes) {\n    Array.from(element.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-')) {\n        attrs[attr.name] = attr.value\n      }\n    })\n  }\n\n  return attrs\n}\n\nexport {\n  attributeValue,\n  attributeValues,\n  extractElementAttributes,\n  extractElementDataset,\n  extractDataAttributes\n}\n","import Debug from './debug'\n\nimport { camelize } from './utils'\nimport { reflexes } from './reflex_store'\n\n// Invokes a lifecycle method on a StimulusReflex controller.\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//   * finalize\n//\n// - reflexElement - the element that triggered the Reflex (not necessarily the StimulusReflex Controller Element)\n// - controllerElement - the element holding the StimulusReflex Controller\n// - reflexId - the UUIDv4 which uniquely identifies the Reflex\n// - payload - the optional \"return value\" from the Reflex method\n//\nconst invokeLifecycleMethod = (\n  stage,\n  reflexElement,\n  controllerElement,\n  reflexId,\n  payload\n) => {\n  if (!controllerElement || !controllerElement.reflexData[reflexId]) return\n\n  const controller = controllerElement.reflexController[reflexId]\n  const reflex = controllerElement.reflexData[reflexId].target\n  const reflexMethodName = reflex.split('#')[1]\n\n  const specificLifecycleMethodName = ['before', 'after', 'finalize'].includes(\n    stage\n  )\n    ? `${stage}${camelize(reflexMethodName)}`\n    : `${camelize(reflexMethodName, false)}${camelize(stage)}`\n  const specificLifecycleMethod = controller[specificLifecycleMethodName]\n\n  const genericLifecycleMethodName = ['before', 'after', 'finalize'].includes(\n    stage\n  )\n    ? `${stage}Reflex`\n    : `reflex${camelize(stage)}`\n  const genericLifecycleMethod = controller[genericLifecycleMethodName]\n\n  if (typeof specificLifecycleMethod === 'function') {\n    specificLifecycleMethod.call(\n      controller,\n      reflexElement,\n      reflex,\n      controllerElement.reflexError[reflexId],\n      reflexId,\n      payload\n    )\n  }\n\n  if (typeof genericLifecycleMethod === 'function') {\n    genericLifecycleMethod.call(\n      controller,\n      reflexElement,\n      reflex,\n      controllerElement.reflexError[reflexId],\n      reflexId,\n      payload\n    )\n  }\n\n  if (reflexes[reflexId] && stage === reflexes[reflexId].finalStage) {\n    Reflect.deleteProperty(controllerElement.reflexController, reflexId)\n    Reflect.deleteProperty(controllerElement.reflexData, reflexId)\n    Reflect.deleteProperty(controllerElement.reflexError, reflexId)\n    // Removing this on a trial basis\n    // 1. Prevents race condition with CR broadcasts\n    // 2. Planning to remove it for v4 as part of queueing refactor\n    // 3. Removing reflexes shouldn't be the responsibility of the lifecycle subsystem\n    // Reflect.deleteProperty(reflexes, reflexId)\n  }\n}\n\ndocument.addEventListener(\n  'stimulus-reflex:before',\n  event =>\n    invokeLifecycleMethod(\n      'before',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    ),\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:success',\n  event => {\n    invokeLifecycleMethod(\n      'success',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    )\n    dispatchLifecycleEvent(\n      'after',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    )\n  },\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:nothing',\n  event => {\n    dispatchLifecycleEvent(\n      'success',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    )\n  },\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:error',\n  event => {\n    invokeLifecycleMethod(\n      'error',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    )\n    dispatchLifecycleEvent(\n      'after',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    )\n  },\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:halted',\n  event =>\n    invokeLifecycleMethod(\n      'halted',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    ),\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:after',\n  event =>\n    invokeLifecycleMethod(\n      'after',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    ),\n  true\n)\n\ndocument.addEventListener(\n  'stimulus-reflex:finalize',\n  event =>\n    invokeLifecycleMethod(\n      'finalize',\n      event.detail.element,\n      event.detail.controller.element,\n      event.detail.reflexId,\n      event.detail.payload\n    ),\n  true\n)\n\n// Dispatches a lifecycle event on document\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//   * finalize\n//\n// - reflexElement - the element that triggered the Reflex (not necessarily the StimulusReflex Controller Element)\n//\n// - controllerElement - the element holding the StimulusReflex Controller\n//\n// - reflexId - the UUIDv4 which uniquely identifies the Reflex\n//\n// - payload - optional Reflex return value\n//\nconst dispatchLifecycleEvent = (\n  stage,\n  reflexElement,\n  controllerElement,\n  reflexId,\n  payload\n) => {\n  if (!controllerElement) {\n    if (Debug.enabled && !reflexes[reflexId].warned) {\n      console.warn(\n        `StimulusReflex was not able execute callbacks or emit events for \"${stage}\" or later life-cycle stages for this Reflex. The StimulusReflex Controller Element is no longer present in the DOM. Could you move the StimulusReflex Controller to an element higher in your DOM?`\n      )\n      reflexes[reflexId].warned = true\n    }\n    return\n  }\n\n  if (\n    !controllerElement.reflexController ||\n    (controllerElement.reflexController &&\n      !controllerElement.reflexController[reflexId])\n  ) {\n    if (Debug.enabled && !reflexes[reflexId].warned) {\n      console.warn(\n        `StimulusReflex detected that the StimulusReflex Controller responsible for this Reflex has been replaced with a new instance. Callbacks and events for \"${stage}\" or later life-cycle stages cannot be executed.`\n      )\n      reflexes[reflexId].warned = true\n    }\n    return\n  }\n\n  const { target } = controllerElement.reflexData[reflexId] || {}\n  const controller = controllerElement.reflexController[reflexId] || {}\n  const event = `stimulus-reflex:${stage}`\n  const action = `${event}:${target.split('#')[1]}`\n  const detail = {\n    reflex: target,\n    controller,\n    reflexId,\n    element: reflexElement,\n    payload\n  }\n  const options = { bubbles: true, cancelable: false, detail }\n\n  controllerElement.dispatchEvent(new CustomEvent(event, options))\n  controllerElement.dispatchEvent(new CustomEvent(action, options))\n\n  if (window.jQuery) {\n    window.jQuery(controllerElement).trigger(event, detail)\n    window.jQuery(controllerElement).trigger(action, detail)\n  }\n}\n\nexport { dispatchLifecycleEvent }\n","import Schema from './schema'\n\nimport { attributeValues } from './attributes'\nimport { extractReflexName } from './utils'\n\n// Returns StimulusReflex controllers local to the passed element based on the data-controller attribute.\n//\nconst localReflexControllers = (app, element) => {\n  return attributeValues(element.getAttribute(Schema.controller)).reduce(\n    (memo, name) => {\n      const controller = app.getControllerForElementAndIdentifier(element, name)\n      if (controller && controller.StimulusReflex) memo.push(controller)\n      return memo\n    },\n    []\n  )\n}\n\n// Returns all StimulusReflex controllers for the passed element.\n// Traverses DOM ancestors starting with element.\n//\nconst allReflexControllers = (app, element) => {\n  let controllers = []\n  while (element) {\n    controllers = controllers.concat(localReflexControllers(app, element))\n    element = element.parentElement\n  }\n  return controllers\n}\n\n// Given a reflex string such as 'click->TestReflex#create' and a list of\n// controllers. It will find the matching controller based on the controller's\n// identifier. e.g. Given these controller identifiers ['foo', 'bar', 'test'],\n// it would select the 'test' controller.\nconst findControllerByReflexName = (reflexName, controllers) => {\n  const controller = controllers.find(controller => {\n    if (!controller.identifier) return\n\n    return (\n      extractReflexName(reflexName)\n        .replace(/([a-z0–9])([A-Z])/g, '$1-$2')\n        .replace(/(::)/g, '--')\n        .toLowerCase() === controller.identifier\n    )\n  })\n\n  return controller || controllers[0]\n}\n\nexport { allReflexControllers, findControllerByReflexName }\n","import CableReady from 'cable_ready'\n\nimport Debug from './debug'\nimport Schema from './schema'\nimport IsolationMode from './isolation_mode'\n\nimport { reflexes } from './reflex_store'\nimport { dispatchLifecycleEvent } from './lifecycle'\nimport { XPathToElement, debounce, emitEvent } from './utils'\nimport { allReflexControllers, findControllerByReflexName } from './controllers'\nimport { attributeValue, attributeValues } from './attributes'\n\nconst received = data => {\n  if (!data.cableReady) return\n\n  if (data.version.replace('.pre', '-pre') !== CableReady.version) {\n    if (Debug.enabled)\n      console.error(\n        `Reflex failed due to cable_ready gem/NPM package version mismatch. Package versions must match exactly.\\nNote that if you are using pre-release builds, gems use the \"x.y.z.preN\" version format, while NPM packages use \"x.y.z-preN\".\\n\\ncable_ready gem: ${data.version}\\ncable_ready NPM: ${CableReady.version}`\n      )\n    return\n  }\n\n  let reflexOperations = []\n\n  for (let i = data.operations.length - 1; i >= 0; i--) {\n    if (data.operations[i].stimulusReflex) {\n      reflexOperations.push(data.operations[i])\n      data.operations.splice(i, 1)\n    }\n  }\n\n  if (reflexOperations.some(operation => operation.stimulusReflex.url !== location.href)) {\n    return\n  }\n\n  let reflexData\n\n  if (reflexOperations.length) {\n    reflexData = reflexOperations[0].stimulusReflex\n    reflexData.payload = reflexOperations[0].payload\n  }\n\n  if (reflexData) {\n    const { reflexId, payload } = reflexData\n\n    if (!reflexes[reflexId] && IsolationMode.disabled) {\n      const controllerElement = XPathToElement(reflexData.xpathController)\n      const reflexElement = XPathToElement(reflexData.xpathElement)\n\n      controllerElement.reflexController = controllerElement.reflexController || {}\n      controllerElement.reflexData = controllerElement.reflexData || {}\n      controllerElement.reflexError = controllerElement.reflexError || {}\n\n      controllerElement.reflexController[reflexId] = reflexes.app.getControllerForElementAndIdentifier(\n        controllerElement,\n        reflexData.reflexController\n      )\n\n      controllerElement.reflexData[reflexId] = reflexData\n\n      dispatchLifecycleEvent(\n        'before',\n        reflexElement,\n        controllerElement,\n        reflexId,\n        payload\n      )\n\n      registerReflex(reflexData)\n    }\n\n    if (reflexes[reflexId]) {\n      reflexes[reflexId].totalOperations = reflexOperations.length\n      reflexes[reflexId].pendingOperations = reflexOperations.length\n      reflexes[reflexId].completedOperations = 0\n      reflexes[reflexId].piggybackOperations = data.operations\n      CableReady.perform(reflexOperations)\n    }\n  } else {\n    if (data.operations.length && reflexes[data.operations[0].reflexId]) {\n      CableReady.perform(data.operations)\n    }\n  }\n}\n\nconst registerReflex = data => {\n  const { reflexId } = data\n  reflexes[reflexId] = { finalStage: 'finalize' }\n\n  const promise = new Promise((resolve, reject) => {\n    reflexes[reflexId].promise = {\n      resolve,\n      reject,\n      data\n    }\n  })\n\n  promise.reflexId = reflexId\n\n  if (Debug.enabled) promise.catch(() => {})\n\n  return promise\n}\n\n// compute the DOM element(s) which will be the morph root\n// use the data-reflex-root attribute on the reflex or the controller\n// optional value is a CSS selector(s); comma-separated list\n// order of preference is data-reflex, data-controller, document body (default)\nconst getReflexRoots = element => {\n  let list = []\n  while (list.length === 0 && element) {\n    let reflexRoot = element.getAttribute(Schema.reflexRoot)\n    if (reflexRoot) {\n      if (reflexRoot.length === 0 && element.id) reflexRoot = `#${element.id}`\n      const selectors = reflexRoot.split(',').filter(s => s.trim().length)\n      if (Debug.enabled && selectors.length === 0) {\n        console.error(\n          `No value found for ${Schema.reflexRoot}. Add an #id to the element or provide a value for ${Schema.reflexRoot}.`,\n          element\n        )\n      }\n      list = list.concat(selectors.filter(s => document.querySelector(s)))\n    }\n    element = element.parentElement\n      ? element.parentElement.closest(`[${Schema.reflexRoot}]`)\n      : null\n  }\n  return list\n}\n\n// Sets up declarative reflex behavior.\n// Any elements that define data-reflex will automatically be wired up with the default StimulusReflexController.\n//\nconst setupDeclarativeReflexes = debounce(() => {\n  document.querySelectorAll(`[${Schema.reflex}]`).forEach(element => {\n    const controllers = attributeValues(element.getAttribute(Schema.controller))\n    const reflexAttributeNames = attributeValues(\n      element.getAttribute(Schema.reflex)\n    )\n    const actions = attributeValues(element.getAttribute(Schema.action))\n    reflexAttributeNames.forEach(reflexName => {\n      const controller = findControllerByReflexName(\n        reflexName,\n        allReflexControllers(reflexes.app, element)\n      )\n      let action\n      if (controller) {\n        action = `${reflexName.split('->')[0]}->${\n          controller.identifier\n        }#__perform`\n        if (!actions.includes(action)) actions.push(action)\n      } else {\n        action = `${reflexName.split('->')[0]}->stimulus-reflex#__perform`\n        if (!controllers.includes('stimulus-reflex')) {\n          controllers.push('stimulus-reflex')\n        }\n        if (!actions.includes(action)) actions.push(action)\n      }\n    })\n    const controllerValue = attributeValue(controllers)\n    const actionValue = attributeValue(actions)\n    if (\n      controllerValue &&\n      element.getAttribute(Schema.controller) != controllerValue\n    ) {\n      element.setAttribute(Schema.controller, controllerValue)\n    }\n    if (actionValue && element.getAttribute(Schema.action) != actionValue)\n      element.setAttribute(Schema.action, actionValue)\n  })\n  emitEvent('stimulus-reflex:ready')\n}, 20)\n\nexport { received, registerReflex, getReflexRoots, setupDeclarativeReflexes }\n","import CableReady from 'cable_ready'\n\nimport Log from './log'\n\nimport { reflexes } from './reflex_store'\nimport { dispatchLifecycleEvent } from './lifecycle'\nimport { XPathToElement } from './utils'\n\nconst beforeDOMUpdate = event => {\n  const { stimulusReflex, payload } = event.detail || {}\n  if (!stimulusReflex) return\n  const { reflexId, xpathElement, xpathController } = stimulusReflex\n  const controllerElement = XPathToElement(xpathController)\n  const reflexElement = XPathToElement(xpathElement)\n  const reflex = reflexes[reflexId]\n  const { promise } = reflex\n\n  reflex.pendingOperations--\n\n  if (reflex.pendingOperations > 0) return\n\n  if (!stimulusReflex.resolveLate)\n    setTimeout(() =>\n      promise.resolve({\n        element: reflexElement,\n        event,\n        data: promise.data,\n        payload,\n        reflexId,\n        toString: () => ''\n      })\n    )\n\n  setTimeout(() =>\n    dispatchLifecycleEvent(\n      'success',\n      reflexElement,\n      controllerElement,\n      reflexId,\n      payload\n    )\n  )\n}\n\nconst afterDOMUpdate = event => {\n  const { stimulusReflex, payload } = event.detail || {}\n  if (!stimulusReflex) return\n  const { reflexId, xpathElement, xpathController } = stimulusReflex\n  const controllerElement = XPathToElement(xpathController)\n  const reflexElement = XPathToElement(xpathElement)\n  const reflex = reflexes[reflexId]\n  const { promise } = reflex\n\n  reflex.completedOperations++\n\n  Log.success(event, false)\n\n  if (reflex.completedOperations < reflex.totalOperations) return\n\n  if (stimulusReflex.resolveLate)\n    setTimeout(() =>\n      promise.resolve({\n        element: reflexElement,\n        event,\n        data: promise.data,\n        payload,\n        reflexId,\n        toString: () => ''\n      })\n    )\n\n  setTimeout(() =>\n    dispatchLifecycleEvent(\n      'finalize',\n      reflexElement,\n      controllerElement,\n      reflexId,\n      payload\n    )\n  )\n\n  if (reflex.piggybackOperations.length)\n    CableReady.perform(reflex.piggybackOperations)\n}\n\nconst routeReflexEvent = event => {\n  const { stimulusReflex, payload, name, body } = event.detail || {}\n  const eventType = name.split('-')[2]\n  if (!stimulusReflex || !['nothing', 'halted', 'error'].includes(eventType))\n    return\n\n  const { reflexId, xpathElement, xpathController } = stimulusReflex\n  const reflexElement = XPathToElement(xpathElement)\n  const controllerElement = XPathToElement(xpathController)\n  const reflex = reflexes[reflexId]\n  const { promise } = reflex\n\n  if (controllerElement) {\n    controllerElement.reflexError = controllerElement.reflexError || {}\n    if (eventType === 'error') controllerElement.reflexError[reflexId] = body\n  }\n\n  switch (eventType) {\n    case 'nothing':\n      nothing(event, payload, promise, reflex, reflexElement)\n      break\n    case 'error':\n      error(event, payload, promise, reflex, reflexElement)\n      break\n    case 'halted':\n      halted(event, payload, promise, reflex, reflexElement)\n      break\n  }\n\n  setTimeout(() =>\n    dispatchLifecycleEvent(\n      eventType,\n      reflexElement,\n      controllerElement,\n      reflexId,\n      payload\n    )\n  )\n\n  if (reflex.piggybackOperations.length)\n    CableReady.perform(reflex.piggybackOperations)\n}\n\nconst nothing = (event, payload, promise, reflex, reflexElement) => {\n  reflex.finalStage = 'after'\n\n  Log.success(event, false)\n\n  setTimeout(() =>\n    promise.resolve({\n      data: promise.data,\n      element: reflexElement,\n      event,\n      payload,\n      reflexId: promise.data.reflexId,\n      toString: () => ''\n    })\n  )\n}\n\nconst halted = (event, payload, promise, reflex, reflexElement) => {\n  reflex.finalStage = 'halted'\n\n  Log.success(event, true)\n\n  setTimeout(() =>\n    promise.resolve({\n      data: promise.data,\n      element: reflexElement,\n      event,\n      payload,\n      reflexId: promise.data.reflexId,\n      toString: () => ''\n    })\n  )\n}\n\nconst error = (event, payload, promise, reflex, reflexElement) => {\n  reflex.finalStage = 'after'\n\n  Log.error(event)\n\n  setTimeout(() =>\n    promise.reject({\n      data: promise.data,\n      element: reflexElement,\n      event,\n      payload,\n      reflexId: promise.data.reflexId,\n      error: event.detail.body,\n      toString: () => event.detail.body\n    })\n  )\n}\n\nexport { beforeDOMUpdate, afterDOMUpdate, routeReflexEvent }\n","import { Controller } from '@hotwired/stimulus'\n\nimport Schema from './schema'\nimport Log from './log'\nimport Debug from './debug'\nimport Deprecate from './deprecate'\nimport ReflexData from './reflex_data'\nimport IsolationMode from './isolation_mode'\nimport ActionCableTransport from './transports/action_cable'\n\nimport { dispatchLifecycleEvent } from './lifecycle'\nimport { uuidv4, serializeForm } from './utils'\nimport { beforeDOMUpdate, afterDOMUpdate, routeReflexEvent } from './callbacks'\nimport { registerReflex, setupDeclarativeReflexes } from './reflexes'\nimport { reflexes } from './reflex_store'\nimport { attributeValues } from './attributes'\n\n// Default StimulusReflexController that is implicitly wired up as data-controller for any DOM elements\n// that have configured data-reflex. Note that this default can be overridden when initializing the application.\n// i.e. StimulusReflex.initialize(myStimulusApplication, MyCustomDefaultController);\n//\nclass StimulusReflexController extends Controller {\n  constructor (...args) {\n    super(...args)\n    register(this)\n  }\n}\n\n// Initializes StimulusReflex by registering the default Stimulus controller with the passed Stimulus application.\n//\n// - application  - the Stimulus application\n// - options\n//   * controller - [optional] the default StimulusReflexController\n//   * consumer   - [optional] the ActionCable consumer\n//   * debug      - [false] log all Reflexes to the console\n//   * params     - [{}] key/value parameters to send during channel subscription\n//   * isolate    - [false] restrict Reflex playback to the tab which initiated it\n//   * deprecate  - [true] show warnings regarding upcoming changes to the library\n//\nconst initialize = (\n  application,\n  { controller, consumer, debug, params, isolate, deprecate } = {}\n) => {\n  ActionCableTransport.set(consumer, params)\n  document.addEventListener(\n    'DOMContentLoaded',\n    () => {\n      document.body.classList.remove('stimulus-reflex-connected')\n      document.body.classList.add('stimulus-reflex-disconnected')\n      if (Deprecate.enabled && consumer)\n        console.warn(\n          \"Deprecation warning: the next version of StimulusReflex will obtain a reference to consumer via the Stimulus application object.\\nPlease add 'application.consumer = consumer' to your index.js after your Stimulus application has been established, and remove the consumer key from your StimulusReflex initialize() options object.\"\n        )\n      if (Deprecate.enabled && IsolationMode.disabled)\n        console.warn(\n          'Deprecation warning: the next version of StimulusReflex will standardize isolation mode, and the isolate option will be removed.\\nPlease update your applications to assume that every tab will be isolated.'\n        )\n    },\n    { once: true }\n  )\n  IsolationMode.set(!!isolate)\n  reflexes.app = application\n  Schema.set(application)\n  reflexes.app.register(\n    'stimulus-reflex',\n    controller || StimulusReflexController\n  )\n  Debug.set(!!debug)\n  if (typeof deprecate !== 'undefined') Deprecate.set(deprecate)\n  const observer = new MutationObserver(setupDeclarativeReflexes)\n  observer.observe(document.documentElement, {\n    attributeFilter: [Schema.reflex, Schema.action],\n    childList: true,\n    subtree: true\n  })\n}\n\n// Registers a Stimulus controller and extends it with StimulusReflex behavior\n//\n// controller - the Stimulus controller\n// options - [optional] configuration\n//\nconst register = (controller, options = {}) => {\n  const channel = 'StimulusReflex::Channel'\n  controller.StimulusReflex = { ...options, channel }\n  ActionCableTransport.createSubscription(controller)\n  Object.assign(controller, {\n    // Indicates if the ActionCable web socket connection is open.\n    // The connection must be open before calling stimulate.\n    //\n    isActionCableConnectionOpen () {\n      return this.StimulusReflex.subscription.consumer.connection.isOpen()\n    },\n\n    // Invokes a server side reflex method.\n    //\n    // - target - the reflex target (full name of the server side reflex) i.e. 'ReflexClassName#method'\n    // - reflexElement - [optional] the element that triggered the reflex, defaults to this.element\n    // - options - [optional] an object that contains at least one of attrs, reflexId, selectors, resolveLate, serializeForm\n    // - *args - remaining arguments are forwarded to the server side reflex method\n    //\n    stimulate () {\n      const url = location.href\n      const args = Array.from(arguments)\n      const target = args.shift() || 'StimulusReflex::Reflex#default_reflex'\n      const controllerElement = this.element\n      const reflexElement =\n        args[0] && args[0].nodeType === Node.ELEMENT_NODE\n          ? args.shift()\n          : controllerElement\n      if (\n        reflexElement.type === 'number' &&\n        reflexElement.validity &&\n        reflexElement.validity.badInput\n      ) {\n        if (Debug.enabled) console.warn('Reflex aborted: invalid numeric input')\n        return\n      }\n      const options = {}\n      if (\n        args[0] &&\n        typeof args[0] === 'object' &&\n        Object.keys(args[0]).filter(key =>\n          [\n            'attrs',\n            'selectors',\n            'reflexId',\n            'resolveLate',\n            'serializeForm',\n            'suppressLogging',\n            'includeInnerHTML',\n            'includeTextContent'\n          ].includes(key)\n        ).length\n      ) {\n        const opts = args.shift()\n        Object.keys(opts).forEach(o => (options[o] = opts[o]))\n      }\n\n      const reflexData = new ReflexData(\n        options,\n        reflexElement,\n        controllerElement,\n        this.identifier,\n        Schema.reflexPermanent,\n        target,\n        args,\n        url,\n        tabId\n      )\n\n      const reflexId = reflexData.reflexId\n\n      if (!this.isActionCableConnectionOpen())\n        throw 'The ActionCable connection is not open! `this.isActionCableConnectionOpen()` must return true before calling `this.stimulate()`'\n\n      if (!ActionCableTransport.subscriptionActive)\n        throw 'The ActionCable channel subscription for StimulusReflex was rejected.'\n\n      // lifecycle setup\n      controllerElement.reflexController =\n        controllerElement.reflexController || {}\n      controllerElement.reflexData = controllerElement.reflexData || {}\n      controllerElement.reflexError = controllerElement.reflexError || {}\n\n      controllerElement.reflexController[reflexId] = this\n      controllerElement.reflexData[reflexId] = reflexData.valueOf()\n\n      dispatchLifecycleEvent(\n        'before',\n        reflexElement,\n        controllerElement,\n        reflexId\n      )\n\n      setTimeout(() => {\n        const { params } = controllerElement.reflexData[reflexId] || {}\n        const check = reflexElement.attributes[Schema.reflexSerializeForm]\n        if (check) {\n          // not needed after v4 because this is only here for the deprecation warning\n          options['serializeForm'] = check.value !== 'false'\n        }\n\n        const form =\n          reflexElement.closest(reflexData.formSelector) ||\n          document.querySelector(reflexData.formSelector) ||\n          reflexElement.closest('form')\n\n        if (Deprecate.enabled && options['serializeForm'] === undefined && form)\n          console.warn(\n            `Deprecation warning: the next version of StimulusReflex will not serialize forms by default.\\nPlease set ${Schema.reflexSerializeForm}=\\\"true\\\" on your Reflex Controller Element or pass { serializeForm: true } as an option to stimulate.`\n          )\n        const formData =\n          options['serializeForm'] === false\n            ? ''\n            : serializeForm(form, {\n                element: reflexElement\n              })\n\n        controllerElement.reflexData[reflexId] = {\n          ...reflexData.valueOf(),\n          params,\n          formData\n        }\n\n        this.StimulusReflex.subscription.send(\n          controllerElement.reflexData[reflexId]\n        )\n      })\n\n      const promise = registerReflex(reflexData.valueOf())\n\n      Log.request(\n        reflexId,\n        target,\n        args,\n        this.context.scope.identifier,\n        reflexElement,\n        controllerElement\n      )\n\n      return promise\n    },\n\n    // Wraps the call to stimulate for any data-reflex elements.\n    // This is internal and should not be invoked directly.\n    __perform (event) {\n      let element = event.target\n      let reflex\n\n      while (element && !reflex) {\n        reflex = element.getAttribute(Schema.reflex)\n        if (!reflex || !reflex.trim().length) element = element.parentElement\n      }\n\n      const match = attributeValues(reflex).find(\n        reflex => reflex.split('->')[0] === event.type\n      )\n\n      if (match) {\n        event.preventDefault()\n        event.stopPropagation()\n        this.stimulate(match.split('->')[1], element)\n      }\n    }\n  })\n}\n\n// Uniquely identify this browser tab in each Reflex\nconst tabId = uuidv4()\n\nconst useReflex = (controller, options = {}) => {\n  register(controller, options)\n}\n\ndocument.addEventListener('cable-ready:after-dispatch-event', routeReflexEvent)\ndocument.addEventListener('cable-ready:before-inner-html', beforeDOMUpdate)\ndocument.addEventListener('cable-ready:before-morph', beforeDOMUpdate)\ndocument.addEventListener('cable-ready:after-inner-html', afterDOMUpdate)\ndocument.addEventListener('cable-ready:after-morph', afterDOMUpdate)\nwindow.addEventListener('load', setupDeclarativeReflexes)\n\nexport default {\n  initialize,\n  register,\n  useReflex,\n  get debug () {\n    return Debug.value\n  },\n  set debug (value) {\n    Debug.set(!!value)\n  },\n  get deprecate () {\n    return Deprecate.value\n  },\n  set deprecate (value) {\n    Deprecate.set(!!value)\n  }\n}\n"],"names":["defaultSchema","reflexAttribute","reflexPermanentAttribute","reflexRootAttribute","reflexSuppressLoggingAttribute","reflexDatasetAttribute","reflexDatasetAllAttribute","reflexSerializeFormAttribute","reflexFormSelectorAttribute","reflexIncludeInnerHtmlAttribute","reflexIncludeTextContentAttribute","schema","set","application","attribute","Object","defineProperty","this","slice","get","reflexes","request","reflexId","target","args","controller","element","controllerElement","success","event","halted","detail","stimulusReflex","error","uuidv4","crypto","window","msCrypto","replace","c","getRandomValues","Uint8Array","toString","camelize","value","uppercaseFirstLetter","$1","toUpperCase","toLowerCase","substr","debounce","callback","delay","timeoutId","clearTimeout","setTimeout","extractReflexName","reflexString","match","emitEvent","document","dispatchEvent","CustomEvent","bubbles","cancelable","jQuery","trigger","XPathToElement","xpath","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","attributeValue","values","filter","v","String","length","map","trim","join","attributeValues","split","invokeLifecycleMethod","stage","reflexElement","payload","reflexData","reflexController","reflex","reflexMethodName","specificLifecycleMethodName","includes","specificLifecycleMethod","genericLifecycleMethodName","genericLifecycleMethod","call","reflexError","finalStage","Reflect","deleteProperty","addEventListener","dispatchLifecycleEvent","action","options","localReflexControllers","app","getAttribute","Schema","reduce","memo","name","getControllerForElementAndIdentifier","StimulusReflex","push","allReflexControllers","controllers","concat","parentElement","findControllerByReflexName","reflexName","find","identifier","setupDeclarativeReflexes","querySelectorAll","forEach","reflexAttributeNames","actions","controllerValue","actionValue","setAttribute","beforeDOMUpdate","xpathElement","xpathController","promise","pendingOperations","resolveLate","resolve","data","afterDOMUpdate","completedOperations","Log","totalOperations","piggybackOperations","CableReady","perform","routeReflexEvent","body","eventType","nothing","reject"],"mappings":"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nE,SAASE,aAAa+D,UAAUjE,SAASE,UAAU6E,YAAY;MACjEC,QAAQC,eAAe1E,kBAAkB8D,kBAAkBnE;MAC3D8E,QAAQC,eAAe1E,kBAAkB6D,YAAYlE;MACrD8E,QAAQC,eAAe1E,kBAAkBuE,aAAa5E;;;EAS1DsC,SAAS0C,iBACP,2BACAzE,SACEuD,sBACE,UACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD,WAEjB;EAGF3B,SAAS0C,iBACP,4BACAzE;IACEuD,sBACE,WACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD;IAEfgB,uBACE,SACA1E,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD;MAGjB;EAGF3B,SAAS0C,iBACP,4BACAzE;IACE0E,uBACE,WACA1E,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD;MAGjB;EAGF3B,SAAS0C,iBACP,0BACAzE;IACEuD,sBACE,SACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD;IAEfgB,uBACE,SACA1E,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD;MAGjB;EAGF3B,SAAS0C,iBACP,2BACAzE,SACEuD,sBACE,UACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD,WAEjB;EAGF3B,SAAS0C,iBACP,0BACAzE,SACEuD,sBACE,SACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACxBG,MAAME,OAAOT,UACbO,MAAME,OAAOwD,WAEjB;EAGF3B,SAAS0C,iBACP,6BACAzE,SACEuD,sBACE,YACAvD,MAAME,OAAOL,SACbG,MAAME,OAAON,WAAWC,SACx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"}